(defpoll temp :interval "1s" "echo $(($(cat /sys/class/hwmon/hwmon3/temp1_input)/1000))")

(defpoll vol :interval "1s" "wpctl get-volume @DEFAULT_AUDIO_SINK@ | awk '{print $2*100}'")

(defpoll mute :interval "1s" "if wpctl get-volume @DEFAULT_AUDIO_SINK@ | grep -q MUTED; then echo 'gray'; else echo 'magenta'; fi")

(defpoll brightness :interval "1s" "brightnessctl info | grep C | cut -d' ' -f4 | cut -c 2- | rev | cut -c 3- | rev")

(defpoll ssid :interval "5s" "iwctl station wlan0 show | grep 'Connected network' | cut -c 35- | xargs")

(defpoll ipprv :interval "5s" "ip -4 addr show wlan0 | awk '/inet/ {print $2}' | cut -d'/' -f1")

(defpoll pid :interval "1s" "echo $$")

(defpoll time :interval "1s" "date +'%m-%d-%y %H:%M:%S'")

(defpoll user :interval "60s" "echo $USER@$HOSTNAME")

(defwidget time_widget []
	(box :class "widget blue"
		(label :text " date: ${time}")))

(defwidget storage_widget []
	(box :class "widget ${EWW_DISK['/'].free < 10000000000 ? 'red' : 'green'}"
		(label :text " disk: ${round(EWW_DISK['/'].used/1000000000,1)}GB / ${round(EWW_DISK['/'].total/1000000000,1)}GB")))

(defwidget volume_widget []
	(box :class "widget ${mute}"
		(label :text " vol: ${vol}")))

(defwidget network_widget []
	(box :class "widget ${ssid == '' ? 'gray' : 'blue'}"
		(label :text " wlan: ${ssid == '' ? 'disconnected' : '${ssid} (${ipprv})'}")))

(defwidget battery_widget []
	(box :class "widget ${EWW_BATTERY.BAT0.status == 'Charging' ? 'white' : EWW_BATTERY.BAT0.capacity > 30 ? 'green' : EWW_BATTERY.BAT0.capacity > 20 ? 'yellow' : EWW_BATTERY.BAT0.capacity > 10 ? 'orange' : EWW_TIME%2 == 0 ? 'red' : 'white'}"
		(label :text " bat: ${EWW_BATTERY.BAT0.capacity}%")))

(defwidget brightness_widget []
	(box :class "widget magenta"
		(label :text " bl: ${brightness}")))

(defwidget pid_widget []
	(box :class "widget cyan"
		(label :text " pid: ${pid}")))

(defwidget cpu_widget []
	(box :class "widget ${EWW_CPU.avg > 85 ? 'red' : EWW_CPU.avg > 70 ? 'yellow' : 'green'}"
		(label :text " cpu: ${round(EWW_CPU.avg,0)}%")))

(defwidget ram_widget []
	(box :class "widget ${EWW_RAM.total_mem - EWW_RAM.used_mem < 1000000000 ? 'red' : 'green'}"
		(label :text " mem: ${round(EWW_RAM.used_mem/1000000000,1)}GB / ${round(EWW_RAM.total_mem/1000000000,1)}GB")))

(defwidget temp_widget []
	(box :class "widget ${temp < 80 ? 'green' : temp < 90 ? 'yellow' : 'red'}"
		(label :text " temp: ${temp}.0°C / 100.0°C")))

(defwidget host_widget []
	(box :class "widget blue"
		(label :text " user: ${user}")))

(defwindow bar
	:monitor 0
	:geometry (geometry
		:x "0%"
		:y "0%"
		:width "100%"
		:anchor "bottom center")
	:exclusive true
	:stacking "fg"
	(box :class "bar" :space-evenly "false" :halign "end"
		(battery_widget)
		(cpu_widget)
		(temp_widget)
		(storage_widget)
		(ram_widget)
		(pid_widget)
		(host_widget)
		(network_widget)
		(time_widget)
		(volume_widget)
		(brightness_widget)))

